"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[901],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),f=r,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3827:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l}});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},o="Gospel special comment syntax",c={unversionedId:"language/syntax",id:"language/syntax",title:"Gospel special comment syntax",description:"Gospel specifications are written in interface files (.mli). They are written",source:"@site/docs/language/syntax.md",sourceDirName:"language",slug:"/language/syntax",permalink:"/gospel/language/syntax",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Union-find",permalink:"/gospel/walkthroughs/union-find"},next:{title:"Lexical conventions",permalink:"/gospel/language/lexical-conventions"}},s={},l=[{value:"Specifications and documentation comments",id:"specifications-and-documentation-comments",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gospel-special-comment-syntax"},"Gospel special comment syntax"),(0,r.kt)("p",null,"Gospel specifications are written in interface files (",(0,r.kt)("inlineCode",{parentName:"p"},".mli"),"). They are written\nin special comments, starting with the ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," character",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"invalidSyntax",invalidSyntax:!0},"val f: int -> int           (* An OCaml value declaration *)\n(*@ y = f x\n    ensures x > 0 *)        (* Its Gospel specification   *)\n\n(*@ type t *)               (* A ghost type declaration   *)\n(*@ ephemeral\n    model size: int *)      (* Its Gospel specification   *)\n")),(0,r.kt)("p",null,"Those comments must be located ",(0,r.kt)("em",{parentName:"p"},"after")," the item they specify."),(0,r.kt)("h2",{id:"specifications-and-documentation-comments"},"Specifications and documentation comments"),(0,r.kt)("p",null,"Note that Gospel annotations can be combined with traditional documentation\ncomments, ",(0,r.kt)("em",{parentName:"p"},"e.g.")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"invalidSyntax",invalidSyntax:!0},"val eucl_division: int -> int -> int * int\n(** this is an implementation of Euclidean division *)\n(*@ q, r = eucl_division x y\n    ... *)\n")),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"Existing specification languages for other host languages introduced this\nnotation, ",(0,r.kt)("em",{parentName:"li"},"e.g.")," ",(0,r.kt)("a",{parentName:"li",href:"https://www.cs.ucf.edu/~leavens/JML/index.shtml"},"JML")," for\nJava and ",(0,r.kt)("a",{parentName:"li",href:"https://frama-c.com/html/acsl.html"},"ACSL")," for C. Hence Gospel\nalso uses this convention.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);