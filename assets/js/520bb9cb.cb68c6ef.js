"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[436],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),f=a,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||i;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},502:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s}});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:2},o="Lexical conventions",l={unversionedId:"language/lexical-conventions",id:"language/lexical-conventions",title:"Lexical conventions",description:"Gospel borrows most of [OCaml's lexical",source:"@site/docs/language/lexical-conventions.md",sourceDirName:"language",slug:"/language/lexical-conventions",permalink:"/gospel/language/lexical-conventions",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Specification locations",permalink:"/gospel/language/locations"},next:{title:"Terms and Formulae",permalink:"/gospel/language/formulae"}},c={},s=[],p={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lexical-conventions"},"Lexical conventions"),(0,a.kt)("p",null,"Gospel borrows most of ",(0,a.kt)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/lex.html"},"OCaml's lexical\nconventions"),".\nThis means that the whitespace rules are the same, that the same kind\nof variable names are allowed, that integers are written the same way,\netc. There are however a number of exceptions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"There are reserved keywords:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"axiom     checks    consumes    diverges    ephemeral    equivalent    model\nmodifies  pure      raises      requires    variant      coercion      ensures\nexists    forall    invariant   predicate\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"There are reserved symbols:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"<->    /\\    \\/\n")))),(0,a.kt)("p",null,"In the rest of this documentation, ",(0,a.kt)("inlineCode",{parentName:"p"},"lident")," (resp. ",(0,a.kt)("inlineCode",{parentName:"p"},"uident"),") stands for an\nidentifier with a lowercase (resp. uppercase) first character."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"There is an extra literal modifier for literals of type ",(0,a.kt)("inlineCode",{parentName:"li"},"int"),". Unmodified\nliterals (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"42"),") are of type ",(0,a.kt)("inlineCode",{parentName:"li"},"integer"),", but Gospel adds a ",(0,a.kt)("inlineCode",{parentName:"li"},"i")," modifier to\nwrite literals of type ",(0,a.kt)("inlineCode",{parentName:"li"},"int")," (e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"42i"),").")))}u.isMDXComponent=!0}}]);