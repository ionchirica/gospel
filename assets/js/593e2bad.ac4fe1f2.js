"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[254],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,d=u["".concat(l,".").concat(m)]||u[m]||f[m]||a;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7547:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3},o="Expressions",s={unversionedId:"language/expressions",id:"language/expressions",title:"Expressions",description:"Gospel expression can be either a term (e.g. x+1) or a formula (e.g.",source:"@site/docs/language/expressions.md",sourceDirName:"language",slug:"/language/expressions",permalink:"/gospel/language/expressions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Lexical Conventions",permalink:"/gospel/language/lexical-conventions"},next:{title:"Type Specifications",permalink:"/gospel/language/type-specifications"}},l={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"expressions"},"Expressions"),(0,i.kt)("p",null,"Gospel expression can be either a term (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"x+1"),") or a formula (e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"forall i. i > 2 -> f i > 0"),"). This distinction is made during type checking,\nand not at the syntax level."),(0,i.kt)("p",null,"The syntax for Gospel expressions is largely OCaml's syntax.\nThe main differences are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Gospel can represent the following formulae:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"invalidSyntax",invalidSyntax:!0},"forall x,y. rest  (* universal quantification of [x] and [y] in [rest] *)\nexists x,y. rest  (* existential quantification of [x] and [y] in [rest] *)\nform1 /\\ form2    (* conjunction *)\nform1 \\/ form2    (* disjunction *)\nform1 <-> form2   (* equivalence *)\nform1 -> form2    (* implication *)\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Gospel can represent the following terms:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"invalidSyntax",invalidSyntax:!0},"old expr          (* value of [expr] before running the function\n                     (in a post-condition of the function) *)\ns[i]              (* [i]-th element of the sequence [s] *)\ns[i..j]           (* slice of sequence of [s] from [i] to [j] indices *)\ns[..j]            (* slice of sequence of [s] from beginning to index [j] *)\ns[i..]            (* slice of sequence of [s] from index [i] to end *)\nf[x->v]           (* function equal to [v] on [x] and to [f y] on [y] *)\n")))),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"e1[e2]")," is part of the OCaml syntax (application of ",(0,i.kt)("inlineCode",{parentName:"p"},"e1")," to a\nsingle-element list ",(0,i.kt)("inlineCode",{parentName:"p"},"[e2]"),") but has a different meaning in Gospel, namely,\naccess to a sequence element."),(0,i.kt)("p",null,"There are two operators for logical conjunction, ",(0,i.kt)("inlineCode",{parentName:"p"},"&&")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"/\\"),", and two\noperators for logical disjunction: ",(0,i.kt)("inlineCode",{parentName:"p"},"||")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"\\/"),". A difference between the two,\nif any, is tool-specific. For instance, a deductive verification tool may\ninterpret ",(0,i.kt)("inlineCode",{parentName:"p"},"A && B")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"A /\\ (A -> B)")," and a runtime assertion checking tool may\ninterpret ",(0,i.kt)("inlineCode",{parentName:"p"},"A && B")," as a lazy operator (as in OCaml) and ",(0,i.kt)("inlineCode",{parentName:"p"},"A /\\ B")," as a strict\noperator."),(0,i.kt)("p",null,"Another noticeable difference w.r.t. the OCaml syntax is that infix operators\ncan be chained in Gospel. One can write ",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= n < 100"),", for instance, and it is\ninterpreted as ",(0,i.kt)("inlineCode",{parentName:"p"},"0 <= n /\\ n < 100"),"."))}u.isMDXComponent=!0}}]);