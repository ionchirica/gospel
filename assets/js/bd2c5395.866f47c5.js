"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[14],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return t?i.createElement(f,r(r({ref:n},u),{},{components:t})):i.createElement(f,r({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[p]="string"==typeof e?e:a,r[1]=c;for(var s=2;s<o;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2628:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return r},default:function(){return p},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return s}});var i=t(7462),a=(t(7294),t(3905));const o={sidebar_position:7},r="Logical declarations",c={unversionedId:"language/logical",id:"language/logical",title:"Logical declarations",description:"Functions and Predicates",source:"@site/docs/language/logical.md",sourceDirName:"language",slug:"/language/logical",permalink:"/gospel/language/logical",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Function contracts",permalink:"/gospel/language/function-contracts"},next:{title:"Tips and Good Practices",permalink:"/gospel/good-practices"}},l={},s=[{value:"Functions and Predicates",id:"functions-and-predicates",level:2},{value:"Uninterpreted symbols and Axioms",id:"uninterpreted-symbols-and-axioms",level:2},{value:"Logical function contracts",id:"logical-function-contracts",level:2},{value:"Termination arguments",id:"termination-arguments",level:2}],u={toc:s};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"logical-declarations"},"Logical declarations"),(0,a.kt)("h2",{id:"functions-and-predicates"},"Functions and Predicates"),(0,a.kt)("p",null,"It is often convenient to introduce shortcuts for terms and formulas to avoid\nrepetitions. ",(0,a.kt)("em",{parentName:"p"},"Predicates")," let you write named formulae definitions in Gospel\ncomments. Here is a typical example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ predicate is_sorted (a: int array) =\n      forall i j. 0 <= i <= j < Array.length a\n                  -> a.(i) <= a.(j) *)\n")),(0,a.kt)("p",null,"We can then reuse the predicate ",(0,a.kt)("inlineCode",{parentName:"p"},"is_sorted")," inside any Gospel annotations such\nas function contracts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"val merge: int array -> int array -> int array\n(*@ c = merge a b\n    requires is_sorted a\n    requires is_sorted b\n    ensures is_sorted c *)\n")),(0,a.kt)("p",null,"Similarly, one can define a shortcut for terms using Gospel's ",(0,a.kt)("em",{parentName:"p"},"functions"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ function powm (x y m: integer) : integer = mod (pow x y) m *)\n")),(0,a.kt)("p",null,"Both predicate definitions and function definitions may be\nrecursive. A recursive definition requires the ",(0,a.kt)("inlineCode",{parentName:"p"},"rec")," keyword like in OCaml:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ predicate rec is_sorted_list (l: int list) = match l with\n      | [] | _ :: [] -> true\n      | h :: (y :: _ as t) -> h <= y /\\ is_sorted_list t *)\n")),(0,a.kt)("h2",{id:"uninterpreted-symbols-and-axioms"},"Uninterpreted symbols and Axioms"),(0,a.kt)("h2",{id:"logical-function-contracts"},"Logical function contracts"),(0,a.kt)("p",null,"Similarly to OCaml functions, contracts can be added to logical declarations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3}","{3}":!0},"(*@ function rec fibonacci (n: integer) : integer =\n      if n <= 1 then n else fibonacci (n-2) + fibonacci (n-1) *)\n(*@ requires n >= 0 *)\n")),(0,a.kt)("p",null,"Such a contract does not prevent you from calling ",(0,a.kt)("inlineCode",{parentName:"p"},"fibonacci")," on negative\nintegers. For instance, ",(0,a.kt)("inlineCode",{parentName:"p"},"fibonacci (-1)")," is a valid Gospel term. However, we\nknow nothing about its value: the definition of ",(0,a.kt)("inlineCode",{parentName:"p"},"fibonacci")," holds only when its\nprecondition is true."),(0,a.kt)("p",null,"The above is equivalent to an uninterpreted function together with an axiom, as\nfollows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ function fibonacci (n: integer) : integer *)\n\n(*@ axiom fibonacci_def : forall n. n >= 0 ->\n      fibonacci n =\n        if n <= 1 then n\n        else fibonacci (n-2) + fibonacci (n-1) *)\n")),(0,a.kt)("p",null,"Logical symbols can also come with post-conditions. For instance, we can assert\nthat Fibonacci numbers are non-negative:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{4}","{4}":!0},"(*@ function rec fibonacci (n: integer) : integer =\n      if n <= 1 then n else fibonacci (n-2) + fibonacci (n-1) *)\n(*@ requires n >= 0\n    ensures result >= 0 *)\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that as opposed to OCaml function contracts, logical function contracts do\nnot have a header. Consequently, a variable called ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," is automatically\nintroduced in the context by Gospel to refer to the value returned by the\nfunction in a post-condition.")),(0,a.kt)("p",null,"The post-condition of ",(0,a.kt)("inlineCode",{parentName:"p"},"fibonacci")," is equivalent to adding an axiom along with an\nuninterpreted counterpart."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ axiom fibonacci_post : forall n. n >= 0 -> fibonacci n >= 0 *)\n")),(0,a.kt)("p",null,"Note that the post-condition holds only when the pre-condition holds."),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Gospel does not perform any verification beyond type-checking. If you wish to\nverify that the definition indeed complies with its contract, you need to use an\nexternal tool such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ocaml-gospel/why3gospel"},"Why3Gospel"),".")),(0,a.kt)("h2",{id:"termination-arguments"},"Termination arguments"),(0,a.kt)("p",null,"Using recursive definitions in the logical domain can introduce inconsistencies.\nFor instance, consider the following recursive function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ function rec f (n: integer): integer = f n + 1 *)\n")),(0,a.kt)("p",null,"As explained above, it is perfectly fine to mention ",(0,a.kt)("inlineCode",{parentName:"p"},"f 0")," in a formula. Although\nwe do not know its value, we know that ",(0,a.kt)("inlineCode",{parentName:"p"},"f 0 = f 0 + 1"),", thus ",(0,a.kt)("inlineCode",{parentName:"p"},"0 = 1"),", which is\nobviously inconsistent."),(0,a.kt)("p",null,"In order to prevent this, it is a good practice to provide a termination\nargument for each recursive definition. Gospel provides one way of doing this\nvia ",(0,a.kt)("em",{parentName:"p"},"variants"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{4}","{4}":!0},"(*@ function rec fibonacci (n: integer) : integer =\n      if n <= 1 then n else fibonacci (n-2) + fibonacci (n-1) *)\n(*@ requires n >= 0\n    variant n *)\n")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"Similarly to contracts, Gospel does not perform any verification that the\nvariant indeed ensures the termination. It is up to an external tool to help you\nverify this.")))}p.isMDXComponent=!0}}]);