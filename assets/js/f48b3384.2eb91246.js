"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[497],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),h=o,m=u["".concat(l,".").concat(h)]||u[h]||f[h]||i;return r?n.createElement(m,a(a({ref:t},c),{},{components:r})):n.createElement(m,a({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},46:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:3},a="Now What?",s={unversionedId:"getting-started/tools",id:"getting-started/tools",title:"Now What?",description:"You've written your first specification. Now what can you do with it?",source:"@site/docs/getting-started/tools.md",sourceDirName:"getting-started",slug:"/getting-started/tools",permalink:"/gospel/getting-started/tools",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Your First Specification",permalink:"/gospel/getting-started/first-spec"},next:{title:"Going Further",permalink:"/gospel/getting-started/going-further"}},l={},p=[{value:"Cameleer",id:"cameleer",level:2},{value:"Ortac",id:"ortac",level:2},{value:"Why3gospel",id:"why3gospel",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"now-what"},"Now What?"),(0,o.kt)("p",null,"You've written your first specification. Now what can you do with it?"),(0,o.kt)("p",null,"Your specification alone is already helpful, as it completes the\ndocstring, which may be incomplete or ambiguous. That could lead to incorrect\ninterpretations of your semantics, or wrong usage of your library."),(0,o.kt)("p",null,"Besides the ",(0,o.kt)("inlineCode",{parentName:"p"},"gospel")," binary, we also provide a developer API which lets other\ntools leverage these specifications to provide different features. Such tools\nalready exist and let you benefit from the specification, which brings more\nguarantees to your programs."),(0,o.kt)("h2",{id:"cameleer"},"Cameleer"),(0,o.kt)("p",null,"Cameleer is a tool for deductive verification of OCaml code."),(0,o.kt)("p",null,"It extends Gospel to implementation files, where you may add logical annotations\nlike logical assertions, loop invariants, or termination arguments. The\nverification relies on the ",(0,o.kt)("a",{parentName:"p",href:"https://why3.lri.fr"},"Why3")," framework. Cameleer\ntranslates the OCaml code into an equivalent WhyML program. It then lets you\nanalyse this program within the framework (and its IDE!) to prove the\nassertions via semi-automated techniques based on SMT provers."),(0,o.kt)("p",null,"For more information, please visit the project page ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ocaml-gospel/cameleer"},"on\nGithub"),"."),(0,o.kt)("h2",{id:"ortac"},"Ortac"),(0,o.kt)("p",null,"Ortac is a testing tool for OCaml programs."),(0,o.kt)("p",null,"It reads the Gospel specifications in the interfaces and generates code to test\nthat they hold at runtime. It comes with a couple of plugins that provide\ndifferent ways to run those tests. You may use it to generate testing suites and\nfuzzers or monitor your program execution."),(0,o.kt)("p",null,"For more information, please visit the project page ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ocaml-gospel/ortac"},"on\nGithub"),"."),(0,o.kt)("h2",{id:"why3gospel"},"Why3gospel"),(0,o.kt)("p",null,"Why3gospel is a ",(0,o.kt)("a",{parentName:"p",href:"https://why3.lri.fr"},"Why3")," plugin that lets you verify that a\nprogram proof refines the Gospel specifications before extracting it to OCaml."),(0,o.kt)("p",null,"It interfaces the Why3 framework with the Gospel specifications to ensure that\nthe former refines the latter and to guarantee that OCaml programs extracted\nfrom proved WhyML comply with their Gospel specification."),(0,o.kt)("p",null,"For more information, please visit the project page ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ocaml-gospel/why3gospel"},"on\nGithub"),"."))}u.isMDXComponent=!0}}]);