"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[894],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,f=u["".concat(s,".").concat(g)]||u[g]||d[g]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1114:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:10},o="Appendix: Gospel in OCaml attributes",l={unversionedId:"language/attributes",id:"language/attributes",title:"Appendix: Gospel in OCaml attributes",description:"Gospel processes a file in various stages:",source:"@site/docs/language/attributes.md",sourceDirName:"language",slug:"/language/attributes",permalink:"/gospel/language/attributes",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Semantics",permalink:"/gospel/language/semantics"},next:{title:"Standard Library",permalink:"/gospel/stdlib"}},s={},p=[{value:"Floating attributes",id:"floating-attributes",level:2},{value:"Attached attributes",id:"attached-attributes",level:2},{value:"Specification of ghost and logical declarations",id:"specification-of-ghost-and-logical-declarations",level:2},{value:"Gospel preprocessor",id:"gospel-preprocessor",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"appendix-gospel-in-ocaml-attributes"},"Appendix: Gospel in OCaml attributes"),(0,r.kt)("p",null,"Gospel processes a file in various stages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Gospel preprocessor turns the special comments ",(0,r.kt)("inlineCode",{parentName:"li"},"(*@ ... *)")," into ",(0,r.kt)("a",{parentName:"li",href:"https://caml.inria.fr/pub/docs/manual-ocaml/attributes.html"},"OCaml\nattributes"),","),(0,r.kt)("li",{parentName:"ul"},"it then relies on the standard OCaml parser to generate an AST,"),(0,r.kt)("li",{parentName:"ul"},"it finally parses the Gospel specifications inside attributes.")),(0,r.kt)("p",null,"Gospel uses OCaml attributes with the identifier ",(0,r.kt)("inlineCode",{parentName:"p"},"gospel")," to bear the Gospel\nspecifications in their payload, as strings: ",(0,r.kt)("inlineCode",{parentName:"p"},'[@@gospel "<spec>"]')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'[@@@gospel "<spec>"]'),"."),(0,r.kt)("h2",{id:"floating-attributes"},"Floating attributes"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/gospel/language/logical"},"Ghost and logical declarations")," must lie in floating attributes,\ninside module signatures:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},'[@@@gospel "val f : int -> int"]\n[@@@gospel "predicate is_zero (x: integer) = x = 0"]\n')),(0,r.kt)("h2",{id:"attached-attributes"},"Attached attributes"),(0,r.kt)("p",null,"Specification bits which are semantically attached to OCaml declarations (e.g.\n",(0,r.kt)("a",{parentName:"p",href:"/gospel/language/function-contracts"},"function contracts")," or ",(0,r.kt)("a",{parentName:"p",href:"/gospel/language/type-specifications"},"type\nspecifications"),") should be written in an attached\nattribute, following OCaml's attachment rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},'val f: int -> int\n[@@gospel "y = f x ensures x > 0"]\n')),(0,r.kt)("h2",{id:"specification-of-ghost-and-logical-declarations"},"Specification of ghost and logical declarations"),(0,r.kt)("p",null,"When ghost and logical declarations need to be specified with a contract, the\ncontract should reside in an attribute attached to the string containing the\ndeclaration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ocaml"},'[@@@gospel "val f : int -> int"\n  [@@gospel "y = f x ensures x > 0"]]\n')),(0,r.kt)("h2",{id:"gospel-preprocessor"},"Gospel preprocessor"),(0,r.kt)("p",null,"The preprocessor is available via the ",(0,r.kt)("inlineCode",{parentName:"p"},"gospel pps")," command. It is also applied\nautomatically on type-checking, so you should not have to worry about manually\napplying it."))}u.isMDXComponent=!0}}]);