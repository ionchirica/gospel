"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[691],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(n),c=i,h=p["".concat(l,".").concat(c)]||p[c]||d[c]||o;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3017:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:4},r="Union-find",s={unversionedId:"walkthroughs/union-find",id:"walkthroughs/union-find",title:"Union-find",description:"In this example, we will highlight an advanced use-case of ghost declarations in",source:"@site/docs/walkthroughs/union-find.md",sourceDirName:"walkthroughs",slug:"/walkthroughs/union-find",permalink:"/gospel/walkthroughs/union-find",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Mutable queues",permalink:"/gospel/walkthroughs/mutable-queue"},next:{title:"Specification locations",permalink:"/gospel/language/locations"}},l={},u=[{value:"Why is this hard to specify?",id:"why-is-this-hard-to-specify",level:2},{value:"Introducing the ghost universe",id:"introducing-the-ghost-universe",level:2},{value:"Elements: gotta catch &#39;em all",id:"elements-gotta-catch-em-all",level:2},{value:"Find your representative",id:"find-your-representative",level:2}],m={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"union-find"},"Union-find"),(0,i.kt)("p",null,"In this example, we will highlight an advanced use-case of ghost declarations in\nGospel through the specification of a union-find datastructure."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Disjoint-set_data_structure"},"Union-find")," is a\nfairly simple datastructure used to keep track of a collection of elements\npartitioned into disjoint sets. Its most simple interface is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"type 'a element\n(** The type for set elements. *)\n\nval make : 'a -> 'a element\n(** [make x] is the singleton containing an element wrapping [x]. *)\n\nval find : 'a element -> 'a element\n(** [find e] is the representative of the subset containing [e]. *)\n\nval union : 'a element -> 'a element -> unit\n(** [union x y] merges the subset containing [x] with the subset\n    containing [y]. *)\n")),(0,i.kt)("h2",{id:"why-is-this-hard-to-specify"},"Why is this hard to specify?"),(0,i.kt)("p",null,"Union-find structures store a partition of a set. Notice that a typical\ninterface for union-find does not materialise this greater set (let us call it\nour ",(0,i.kt)("em",{parentName:"p"},"universe"),"). Instead, the programmer has access to individual elements of\nthe set, and may merge them or access a representative of the partition it is\nin."),(0,i.kt)("p",null,"However, for the sake of specification, not having this global set is a problem.\nHow can we state that the subsets are disjoint? How do we refer to the set of\nelements that exist in the union-find universe? Can we even tell that the\nrepresentative of an element (returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"find"),") is indeed part of a subset\nthat was ",(0,i.kt)("inlineCode",{parentName:"p"},"union"),"ed with it at some point? It seems that we cannot do any of this\nby attaching contracts to our functions and type only."),(0,i.kt)("p",null,"This example shows how Gospel's ",(0,i.kt)("em",{parentName:"p"},"ghost declarations")," help describe such complex\nbehaviours."),(0,i.kt)("h2",{id:"introducing-the-ghost-universe"},"Introducing the ghost universe"),(0,i.kt)("p",null,"Seemingly, the root of our problems is that union-find relies on the implicit\nuniverse of elements. It does not exist in the OCaml's interface, so let us\nintroduce it as a ghost type declaration. We can also add that this universe is\nmutable: so long as elements are added, for instance, it will be modified."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ type 'a universe *)\n(*@ ephemeral *)\n")),(0,i.kt)("p",null,"Now, our three functions still apply to set elements, but they also apply ",(0,i.kt)("em",{parentName:"p"},"in the\ncontext of an universe"),": you create a new singleton subset in the context of the\ngreater set, or find the representative of an element in the rest of universe\nfor instance. This translates into our three functions taking a value of type ",(0,i.kt)("inlineCode",{parentName:"p"},"'a\nuniverse")," as argument. Of course, ",(0,i.kt)("inlineCode",{parentName:"p"},"'a universe")," is ghost, and you do not want to\nmodify the signature of the functions anyway, so this argument is ghost too",(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),".\nWe can also already get a sense that ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," will modify the\nuniverse."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"val make : 'a -> 'a element\n(*@ e = make [u: 'a universe] v\n    modifies u *)\n\nval find : 'a element -> 'a element\n(*@ e = find [u: 'a universe] x *)\n\nval union : 'a element -> 'a element -> unit\n(*@ union [u: 'a universe] x y\n    modifies u *)\n")),(0,i.kt)("p",null,"Since we now have a type for universes, and functions that take values of such\ntype, we probably need a constructor for this type. Let us introduce that as a\nghost value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ val make_universe: unit -> 'a universe *)\n")),(0,i.kt)("p",null,"Having this abstract type on is not very useful so far. We are able to state\nthat the functions apply in the context of a universe, and that they may mutate\nit, but that's pretty much it. Let us be more precise than that."),(0,i.kt)("h2",{id:"elements-gotta-catch-em-all"},"Elements: gotta catch 'em all"),(0,i.kt)("p",null,"A first interesting property that we would like to capture is that the subsets\nare indeed disjoint. For instance, ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," should not create an element that is\nalready in the universe, otherwise you would have two different subsets\ncontaining the same element."),(0,i.kt)("p",null,"In order to specify this, we need to be able to talk about the set of existing\nelements in the universe. Let us introduce this as a logical model attached to\nour ",(0,i.kt)("inlineCode",{parentName:"p"},"universe")," type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ type 'a universe *)\n(*@ mutable model dom : 'a element set *)\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Since at least one model is mutable, we may now omit the ",(0,i.kt)("inlineCode",{parentName:"p"},"ephemeral")," keyword,\nalthough it is valid to keep it if you prefer. For instance, you may keep it if\nyou want to indicate that the type is also mutable in a way that is not visible\nin the models.")),(0,i.kt)("p",null,"Now let us add more information on how the functions interact with it. The\nconstructor should ensure two things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The returned element is a fresh element."),(0,i.kt)("li",{parentName:"ul"},"The universe's domain is augmented with the singleton containing the\nprovided value.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{4,5}","{4,5}":!0},"val make : 'a -> 'a element\n(*@ e = make [u: 'a universe] v\n    modifies u.dom\n    ensures not (Set.mem e (old u.dom))\n    ensures u.dom = Set.add e (old u.dom) *)\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," function obviously needs an element of the universe, and also returns\nan element that is part of the universe:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3,4}","{3,4}":!0},"val find : 'a element -> 'a element\n(*@ e = find [u: 'a universe] x\n    requires Set.mem x u.dom\n    ensures Set.mem e u.dom *)\n")),(0,i.kt)("p",null,"Finally, ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," requires that the provided elements are part of the universe\ntoo. Note that it does not modify the universe domain (no element is added nor\nremoved), but since we added the ",(0,i.kt)("inlineCode",{parentName:"p"},"modify u")," clause, we need to state that\nexplicitly, or the contract may imply that ",(0,i.kt)("inlineCode",{parentName:"p"},"u.dom")," was modified (in an\nunspecified way)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3-4,6}","{3-4,6}":!0},"val union : 'a element -> 'a element -> unit\n(*@ union [u: 'a universe] x y\n    requires Set.mem x u.dom\n    requires Set.mem y u.dom\n    modifies u\n    ensures u.dom = old u.dom *)\n")),(0,i.kt)("h2",{id:"find-your-representative"},"Find your representative"),(0,i.kt)("p",null,"We can now talk about all the elements in our partition, but we still haven't\nmentioned elements representatives at all. Each element in the universe has a\nrepresentative in the set, so we may represent this using a ",(0,i.kt)("inlineCode",{parentName:"p"},"'a element -> 'a\nelement")," function. We can also add two invariants:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the representative of an element must live in the same universe as the\nelement itself."),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"rep")," function is idempotent: the representative of an element is its own\nrepresentative.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{3-5}","{3-5}":!0},"(*@ type 'a universe *)\n(*@ mutable model dom : 'a element set\n    mutable model rep : 'a element -> 'a element\n    invariant forall e. Set.mem e dom -> Set.mem (rep e) dom\n    invariant forall e. Set.mem e dom -> rep (rep e) = rep e *)\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Notice how in both cases, speaking of the representative of an element only\nmakes sense for elements that are in the universe. However, Gospel's logic is\ntotal, so ",(0,i.kt)("inlineCode",{parentName:"p"},"rep")," is also defined outside of the universe, but it is unspecified\nthere.")),(0,i.kt)("p",null,"Let us now add clauses to our functions to indicate how they interact with\n",(0,i.kt)("inlineCode",{parentName:"p"},"rep"),". After a call to our constructor, the created element is obviously its own\nrepresentative, and all other representatives are left unchanged:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{6}","{6}":!0},"val make : 'a -> 'a element\n(*@ e = make [u: 'a universe] v\n    modifies u.dom\n    ensures not (Set.mem e (old u.dom))\n    ensures u.dom = Set.add e (old u.dom)\n    ensures u.rep = (old u.rep)[e -> e] *)\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_[_ -> _]")," operator is defined in the ",(0,i.kt)("a",{parentName:"p",href:"../stdlib"},"standard library"),". The\nnotation ",(0,i.kt)("inlineCode",{parentName:"p"},"f[x -> y]")," is a shorthand notation for the function defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"fun i\n-> if i = x then y else f i"))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"find")," function does not modify the representatives, but return the\nrepresentative of the input element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{5}","{5}":!0},"val find : 'a element -> 'a element\n(*@ e = find [u: 'a universe] x\n    requires Set.mem x u.dom\n    ensures Set.mem e u.dom\n    ensures e = u.rep x *)\n")),(0,i.kt)("p",null,"Finally, the postcondition for ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," is a bit more involved. We need to\ncapture that the new representative of an element may change."),(0,i.kt)("p",null,"First, it is left unchanged if the element is not in ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," nor ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," subset."),(0,i.kt)("p",null,"Let's start by introducing a predicate that will help us decide if two elements\nare in the same subset (or equivalence class). This is the case iff they have\nthe same subset representative:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"(*@ predicate equivalent (u: 'a universe) (x y: 'a element) =\n      u.rep x = u.rep y *)\n")),(0,i.kt)("p",null,"We can now use that to state that elements that are not equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),"\nhave the same representative:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{7-9}","{7-9}":!0},"val union : 'a elements -> 'a elements -> unit\n(*@ union [u: 'a universe] x y\n    requires Set.mem x u.dom\n    requires Set.mem y u.dom\n    modifies u\n    ensures u.dom = old u.dom\n    ensures forall e.\n      not (old (equivalent u x e \\/ equivalent u y e))\n      -> u.rep e = old (u.rep e) *)\n")),(0,i.kt)("p",null,"And finally, elements that were in the unioned subsets now must all have the\nsame representative, and that element is either the old ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," representative, or\nthe old ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," representative."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml",metastring:"{9-13}","{9-13}":!0},"val union : 'a element -> 'a element -> unit\n(*@ union [u: 'a universe] x y\n    requires Set.mem x u.dom\n    requires Set.mem y u.dom\n    modifies u\n    ensures u.dom = old u.dom\n    ensures forall e. not (old (equivalent u x e \\/ equivalent u y e))\n                      -> u.rep e = old (u.rep e)\n    ensures exists r. (r = old (u.rep x) \\/ r = old (u.rep y))\n      /\\ forall e. old (equivalent u x e \\/ equivalent u y e)\n                   -> u.rep e = r *)\n")),(0,i.kt)("p",null,"We could go further and add more functions, for instance an equality function\nover ",(0,i.kt)("inlineCode",{parentName:"p"},"element"),"s, or a ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," function to extract the value contained in an\nelement, but we'll keep it there for this tutorial. Hopefully, you now have a\nbetter overview of the purpose of ghost types in Gospel specifications and how\nthey can help you refer to meta-elements that are not present in the code, or\nnot exposed."),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-1"},"If you're not comfortable with ghost arguments, you may want to ",(0,i.kt)("a",{parentName:"li",href:"fibonacci"},"read our\nFibonacci walk-through")," first.",(0,i.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}p.isMDXComponent=!0}}]);